# As dependencias ficam no repositorio central do Maven

# Podemos configurar um outro repositorio no pom.xml usando a tag repositories

# Por padrao, sempre que adicionamos uma nova dependencia, primeiro o maven procura no cache
local da máquina, que geralmente fica na raiz do usuário na pasta oculta .m2

# As vezes quando o maven vai fazer o download de alguma dependencia, ele pode acabar corrompendo 
a dependencia e isso ficara armazenado no cache local da máquina. Nessa situacao, o ideal é 
apagar todo o cache local e mandar o maven baixar as dependencias novamente.

# acessando o diretorio da raiz do projeto, podemos usar os comandos:

1 - mvn clean == para limpar o diretorio target
2 - mvn compile == para compilar o projeto
3 - mvn test == vai procurar os testes automatizados do projeto e dizer se passou ou nao
4 - mvn package == faz o mvn compile, depois mvn test e só depois vai gerar o artefato da aplicacao no formato 
especificado no pom.xml, que pode ser .jar ou .war
5 - mvn install == faz todo o processo do package, porém ele salva também no cache local no repositorio .m2
6 - mvn deploy == faz todo o processo do package, porem ele salva também no repositorio remoto configurado no pom.xml,
dentro da tag repositories



# No pom.xml, utilizamos a tag packaging para informar o tipo de empacotamento. Por padrao o formato criado é .jar.

# No pom.xml, dentro da tag build, podemos utilizar a tag finalName para especificar o nome que será utilizado na 
criacao do jar ou war da aplicacao

# Podemos adicionar diversos plugins no pom.xml dentro da tag build -> plugins -> plugin com as informacoes necessarias.

# É possível ver os plugins disponiveis no site do Maven plugins: https://maven.apache.org/plugins/

# Em situacoes onde estamos numa rede que contém proxy, precisamos configurar isso no projeto também para que seja
possível baixar as dependencias da aplicacao. Essa configuracao é feita num arquivo chamado "settings.xml" que fica
no repositorio local .m2.
Dentro desse arquivos adicionamos uma tag chamada proxies -> criamos uma tag chamada proxy -> depois adicionamos as
informacoes referentes a hostname, port, username e password. Temos um exemplo na raiz deste projeto.

# Outro ponto interessante é que a tag repositories que colocamos no pom.xml e que é responsavel por apontar o repositorio
remoto de onde o maven deve baixar as dependencias, ela pode ser configurada também no settings.xml, porém caso essa tag
já esteja definida no pom e no settings, o maven sempre vai dar preferencia para o pom.xml.

# A partir do Java 9 surgiu a api de modulos e com isso vieram novas tags para pom.xml:
- Em cenários onde temos modulos, geralmente temos uma aplicacao que seria como "pai" desses modulos.
- No projeto pai, no pom.xml temos a tag packaging que deve estar definida com o valor pom e além disso temos a tag
"modules" que deve conter todos os modulos que integram a aplicacao.
- Já dentro do pom.xml de cada um dos modulos, não temos a tag "groupId", mas temos a tag "parent" que deve conter 
as configuracoes do modulo "pai" que são groupId, artifactId e version. 
- Alem disso, as dependencias que que estão no pom.xml do modulo "pai" serão herdadas aos modulos filhos. Com isso é
possível ter um controle melhor das dependencias especificas de cada projeto.
- Outro ponto interessante é que se um modulo filho "A" depende de outro modulo filho "B", é possivel fazer isso 
adicionando o modulo filho "B" como dependencia no pom.xml do modulo filho "A".


